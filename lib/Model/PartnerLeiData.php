<?php
/**
 * PartnerLeiData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PartnerLeiData Class Doc Comment
 *
 * @category Class
 * @description All company data to create the LEI
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerLeiData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartnerLeiData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'legalAddressData' => '\OpenAPI\Client\Model\LegalAddressData',
        'hqAddressData' => '\OpenAPI\Client\Model\HqAddressData',
        'entityData' => '\OpenAPI\Client\Model\EntityData',
        'relationshipData' => '\OpenAPI\Client\Model\RelationshipData',
        'authPerson' => 'string[]',
        'contactAddress' => '\OpenAPI\Client\Model\ContactAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'legalAddressData' => null,
        'hqAddressData' => null,
        'entityData' => null,
        'relationshipData' => null,
        'authPerson' => null,
        'contactAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'legalAddressData' => false,
		'hqAddressData' => false,
		'entityData' => false,
		'relationshipData' => false,
		'authPerson' => false,
		'contactAddress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legalAddressData' => 'legalAddressData',
        'hqAddressData' => 'hqAddressData',
        'entityData' => 'entityData',
        'relationshipData' => 'relationshipData',
        'authPerson' => 'authPerson',
        'contactAddress' => 'contactAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legalAddressData' => 'setLegalAddressData',
        'hqAddressData' => 'setHqAddressData',
        'entityData' => 'setEntityData',
        'relationshipData' => 'setRelationshipData',
        'authPerson' => 'setAuthPerson',
        'contactAddress' => 'setContactAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legalAddressData' => 'getLegalAddressData',
        'hqAddressData' => 'getHqAddressData',
        'entityData' => 'getEntityData',
        'relationshipData' => 'getRelationshipData',
        'authPerson' => 'getAuthPerson',
        'contactAddress' => 'getContactAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('legalAddressData', $data ?? [], null);
        $this->setIfExists('hqAddressData', $data ?? [], null);
        $this->setIfExists('entityData', $data ?? [], null);
        $this->setIfExists('relationshipData', $data ?? [], null);
        $this->setIfExists('authPerson', $data ?? [], null);
        $this->setIfExists('contactAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['legalAddressData'] === null) {
            $invalidProperties[] = "'legalAddressData' can't be null";
        }
        if ($this->container['entityData'] === null) {
            $invalidProperties[] = "'entityData' can't be null";
        }
        if ($this->container['relationshipData'] === null) {
            $invalidProperties[] = "'relationshipData' can't be null";
        }
        if ($this->container['authPerson'] === null) {
            $invalidProperties[] = "'authPerson' can't be null";
        }
        if ($this->container['contactAddress'] === null) {
            $invalidProperties[] = "'contactAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legalAddressData
     *
     * @return \OpenAPI\Client\Model\LegalAddressData
     */
    public function getLegalAddressData()
    {
        return $this->container['legalAddressData'];
    }

    /**
     * Sets legalAddressData
     *
     * @param \OpenAPI\Client\Model\LegalAddressData $legalAddressData legalAddressData
     *
     * @return self
     */
    public function setLegalAddressData($legalAddressData)
    {
        if (is_null($legalAddressData)) {
            throw new \InvalidArgumentException('non-nullable legalAddressData cannot be null');
        }
        $this->container['legalAddressData'] = $legalAddressData;

        return $this;
    }

    /**
     * Gets hqAddressData
     *
     * @return \OpenAPI\Client\Model\HqAddressData|null
     */
    public function getHqAddressData()
    {
        return $this->container['hqAddressData'];
    }

    /**
     * Sets hqAddressData
     *
     * @param \OpenAPI\Client\Model\HqAddressData|null $hqAddressData hqAddressData
     *
     * @return self
     */
    public function setHqAddressData($hqAddressData)
    {
        if (is_null($hqAddressData)) {
            throw new \InvalidArgumentException('non-nullable hqAddressData cannot be null');
        }
        $this->container['hqAddressData'] = $hqAddressData;

        return $this;
    }

    /**
     * Gets entityData
     *
     * @return \OpenAPI\Client\Model\EntityData
     */
    public function getEntityData()
    {
        return $this->container['entityData'];
    }

    /**
     * Sets entityData
     *
     * @param \OpenAPI\Client\Model\EntityData $entityData entityData
     *
     * @return self
     */
    public function setEntityData($entityData)
    {
        if (is_null($entityData)) {
            throw new \InvalidArgumentException('non-nullable entityData cannot be null');
        }
        $this->container['entityData'] = $entityData;

        return $this;
    }

    /**
     * Gets relationshipData
     *
     * @return \OpenAPI\Client\Model\RelationshipData
     */
    public function getRelationshipData()
    {
        return $this->container['relationshipData'];
    }

    /**
     * Sets relationshipData
     *
     * @param \OpenAPI\Client\Model\RelationshipData $relationshipData relationshipData
     *
     * @return self
     */
    public function setRelationshipData($relationshipData)
    {
        if (is_null($relationshipData)) {
            throw new \InvalidArgumentException('non-nullable relationshipData cannot be null');
        }
        $this->container['relationshipData'] = $relationshipData;

        return $this;
    }

    /**
     * Gets authPerson
     *
     * @return string[]
     */
    public function getAuthPerson()
    {
        return $this->container['authPerson'];
    }

    /**
     * Sets authPerson
     *
     * @param string[] $authPerson authPerson
     *
     * @return self
     */
    public function setAuthPerson($authPerson)
    {
        if (is_null($authPerson)) {
            throw new \InvalidArgumentException('non-nullable authPerson cannot be null');
        }
        $this->container['authPerson'] = $authPerson;

        return $this;
    }

    /**
     * Gets contactAddress
     *
     * @return \OpenAPI\Client\Model\ContactAddress
     */
    public function getContactAddress()
    {
        return $this->container['contactAddress'];
    }

    /**
     * Sets contactAddress
     *
     * @param \OpenAPI\Client\Model\ContactAddress $contactAddress contactAddress
     *
     * @return self
     */
    public function setContactAddress($contactAddress)
    {
        if (is_null($contactAddress)) {
            throw new \InvalidArgumentException('non-nullable contactAddress cannot be null');
        }
        $this->container['contactAddress'] = $contactAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


