<?php
/**
 * PartnerOrderData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PartnerOrderData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerOrderData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartnerOrderData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'partnerLeiData' => '\OpenAPI\Client\Model\PartnerLeiData',
        'orderType' => 'string',
        'companyType' => 'string',
        'payment' => '\OpenAPI\Client\Model\Payment',
        'referenceLei' => 'string',
        'transferLou' => 'string',
        'transferLei' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'partnerLeiData' => null,
        'orderType' => null,
        'companyType' => null,
        'payment' => null,
        'referenceLei' => null,
        'transferLou' => null,
        'transferLei' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'partnerLeiData' => false,
		'orderType' => false,
		'companyType' => false,
		'payment' => false,
		'referenceLei' => false,
		'transferLou' => false,
		'transferLei' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerLeiData' => 'partnerLeiData',
        'orderType' => 'orderType',
        'companyType' => 'companyType',
        'payment' => 'payment',
        'referenceLei' => 'referenceLei',
        'transferLou' => 'transferLou',
        'transferLei' => 'transferLei'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partnerLeiData' => 'setPartnerLeiData',
        'orderType' => 'setOrderType',
        'companyType' => 'setCompanyType',
        'payment' => 'setPayment',
        'referenceLei' => 'setReferenceLei',
        'transferLou' => 'setTransferLou',
        'transferLei' => 'setTransferLei'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partnerLeiData' => 'getPartnerLeiData',
        'orderType' => 'getOrderType',
        'companyType' => 'getCompanyType',
        'payment' => 'getPayment',
        'referenceLei' => 'getReferenceLei',
        'transferLou' => 'getTransferLou',
        'transferLei' => 'getTransferLei'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_TYPE_LEI = 'OrderType.LEI';
    public const ORDER_TYPE_TR_IN = 'OrderType.TR_IN';
    public const ORDER_TYPE_RENEW = 'OrderType.RENEW';
    public const COMPANY_TYPE_COMPANY_TYPE_COMPANY = 'CompanyType.COMPANY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_LEI,
            self::ORDER_TYPE_TR_IN,
            self::ORDER_TYPE_RENEW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompanyTypeAllowableValues()
    {
        return [
            self::COMPANY_TYPE_COMPANY_TYPE_COMPANY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('partnerLeiData', $data ?? [], null);
        $this->setIfExists('orderType', $data ?? [], null);
        $this->setIfExists('companyType', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('referenceLei', $data ?? [], null);
        $this->setIfExists('transferLou', $data ?? [], null);
        $this->setIfExists('transferLei', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partnerLeiData'] === null) {
            $invalidProperties[] = "'partnerLeiData' can't be null";
        }
        if ($this->container['orderType'] === null) {
            $invalidProperties[] = "'orderType' can't be null";
        }
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['orderType']) && !in_array($this->container['orderType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderType', must be one of '%s'",
                $this->container['orderType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['companyType'] === null) {
            $invalidProperties[] = "'companyType' can't be null";
        }
        $allowedValues = $this->getCompanyTypeAllowableValues();
        if (!is_null($this->container['companyType']) && !in_array($this->container['companyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'companyType', must be one of '%s'",
                $this->container['companyType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        if (!is_null($this->container['transferLou']) && !preg_match("/^(?:([0-9A-Z]){18}[0-9]{2})?$/", $this->container['transferLou'])) {
            $invalidProperties[] = "invalid value for 'transferLou', must be conform to the pattern /^(?:([0-9A-Z]){18}[0-9]{2})?$/.";
        }

        if (!is_null($this->container['transferLei']) && !preg_match("/^(?:([0-9A-Z]){18}[0-9]{2})?$/", $this->container['transferLei'])) {
            $invalidProperties[] = "invalid value for 'transferLei', must be conform to the pattern /^(?:([0-9A-Z]){18}[0-9]{2})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partnerLeiData
     *
     * @return \OpenAPI\Client\Model\PartnerLeiData
     */
    public function getPartnerLeiData()
    {
        return $this->container['partnerLeiData'];
    }

    /**
     * Sets partnerLeiData
     *
     * @param \OpenAPI\Client\Model\PartnerLeiData $partnerLeiData partnerLeiData
     *
     * @return self
     */
    public function setPartnerLeiData($partnerLeiData)
    {
        if (is_null($partnerLeiData)) {
            throw new \InvalidArgumentException('non-nullable partnerLeiData cannot be null');
        }
        $this->container['partnerLeiData'] = $partnerLeiData;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string $orderType The type of order which was submitted by the customer || LEI = New LEI Order, TR_IN = TRANSFER A LEI, RENEW = RENEW A LEI
     *
     * @return self
     */
    public function setOrderType($orderType)
    {
        if (is_null($orderType)) {
            throw new \InvalidArgumentException('non-nullable orderType cannot be null');
        }
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!in_array($orderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderType', must be one of '%s'",
                    $orderType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets companyType
     *
     * @return string
     */
    public function getCompanyType()
    {
        return $this->container['companyType'];
    }

    /**
     * Sets companyType
     *
     * @param string $companyType The type of company for which the LEI is to be issued || CURRENTLY ONLY COMPANY POSSIBLE
     *
     * @return self
     */
    public function setCompanyType($companyType)
    {
        if (is_null($companyType)) {
            throw new \InvalidArgumentException('non-nullable companyType cannot be null');
        }
        $allowedValues = $this->getCompanyTypeAllowableValues();
        if (!in_array($companyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'companyType', must be one of '%s'",
                    $companyType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['companyType'] = $companyType;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Model\Payment $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets referenceLei
     *
     * @return string|null
     */
    public function getReferenceLei()
    {
        return $this->container['referenceLei'];
    }

    /**
     * Sets referenceLei
     *
     * @param string|null $referenceLei LEI number in case of ReNewal or Transfer || NULL if job_type = NEW_LEI
     *
     * @return self
     */
    public function setReferenceLei($referenceLei)
    {
        if (is_null($referenceLei)) {
            throw new \InvalidArgumentException('non-nullable referenceLei cannot be null');
        }
        $this->container['referenceLei'] = $referenceLei;

        return $this;
    }

    /**
     * Gets transferLou
     *
     * @return string|null
     */
    public function getTransferLou()
    {
        return $this->container['transferLou'];
    }

    /**
     * Sets transferLou
     *
     * @param string|null $transferLou If the order OrderType is 'LEI' transferLou and referenceLei must be empty || if orderType is 'TR-IN' transferLou and referenceLei must contain a value
     *
     * @return self
     */
    public function setTransferLou($transferLou)
    {
        if (is_null($transferLou)) {
            throw new \InvalidArgumentException('non-nullable transferLou cannot be null');
        }

        if ((!preg_match("/^(?:([0-9A-Z]){18}[0-9]{2})?$/", $transferLou))) {
            throw new \InvalidArgumentException("invalid value for \$transferLou when calling PartnerOrderData., must conform to the pattern /^(?:([0-9A-Z]){18}[0-9]{2})?$/.");
        }

        $this->container['transferLou'] = $transferLou;

        return $this;
    }

    /**
     * Gets transferLei
     *
     * @return string|null
     */
    public function getTransferLei()
    {
        return $this->container['transferLei'];
    }

    /**
     * Sets transferLei
     *
     * @param string|null $transferLei If the order OrderType is 'LEI' transferLou and transferLei must be empty || if orderType is 'TR-IN' transferLou and transferLei must contain a value
     *
     * @return self
     */
    public function setTransferLei($transferLei)
    {
        if (is_null($transferLei)) {
            throw new \InvalidArgumentException('non-nullable transferLei cannot be null');
        }

        if ((!preg_match("/^(?:([0-9A-Z]){18}[0-9]{2})?$/", $transferLei))) {
            throw new \InvalidArgumentException("invalid value for \$transferLei when calling PartnerOrderData., must conform to the pattern /^(?:([0-9A-Z]){18}[0-9]{2})?$/.");
        }

        $this->container['transferLei'] = $transferLei;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


