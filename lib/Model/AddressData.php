<?php
/**
 * AddressData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AddressData Class Doc Comment
 *
 * @category Class
 * @description Legal or headquarters address information. In case of HQ address, this is optional.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddressData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddressData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'state' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'street' => 'string',
        'street_nr' => 'string',
        'nr_in_building' => 'string',
        'mail_route' => 'string',
        'additional_info1' => 'string',
        'additional_info2' => 'string',
        'additional_info3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'state' => null,
        'city' => null,
        'zip' => null,
        'street' => null,
        'street_nr' => null,
        'nr_in_building' => null,
        'mail_route' => null,
        'additional_info1' => null,
        'additional_info2' => null,
        'additional_info3' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country' => false,
		'state' => false,
		'city' => false,
		'zip' => false,
		'street' => false,
		'street_nr' => false,
		'nr_in_building' => false,
		'mail_route' => false,
		'additional_info1' => false,
		'additional_info2' => false,
		'additional_info3' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'state' => 'state',
        'city' => 'city',
        'zip' => 'zip',
        'street' => 'street',
        'street_nr' => 'streetNr',
        'nr_in_building' => 'nrInBuilding',
        'mail_route' => 'mailRoute',
        'additional_info1' => 'additionalInfo1',
        'additional_info2' => 'additionalInfo2',
        'additional_info3' => 'additionalInfo3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'state' => 'setState',
        'city' => 'setCity',
        'zip' => 'setZip',
        'street' => 'setStreet',
        'street_nr' => 'setStreetNr',
        'nr_in_building' => 'setNrInBuilding',
        'mail_route' => 'setMailRoute',
        'additional_info1' => 'setAdditionalInfo1',
        'additional_info2' => 'setAdditionalInfo2',
        'additional_info3' => 'setAdditionalInfo3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'state' => 'getState',
        'city' => 'getCity',
        'zip' => 'getZip',
        'street' => 'getStreet',
        'street_nr' => 'getStreetNr',
        'nr_in_building' => 'getNrInBuilding',
        'mail_route' => 'getMailRoute',
        'additional_info1' => 'getAdditionalInfo1',
        'additional_info2' => 'getAdditionalInfo2',
        'additional_info3' => 'getAdditionalInfo3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street_nr', $data ?? [], null);
        $this->setIfExists('nr_in_building', $data ?? [], null);
        $this->setIfExists('mail_route', $data ?? [], null);
        $this->setIfExists('additional_info1', $data ?? [], null);
        $this->setIfExists('additional_info2', $data ?? [], null);
        $this->setIfExists('additional_info3', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of legal company address || ISO 3166
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State of the legal company address || ISO 3166
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of legal company address
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip code of the legal company address
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Street of legal company address
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_nr
     *
     * @return string|null
     */
    public function getStreetNr()
    {
        return $this->container['street_nr'];
    }

    /**
     * Sets street_nr
     *
     * @param string|null $street_nr House number of the legal company address
     *
     * @return self
     */
    public function setStreetNr($street_nr)
    {
        if (is_null($street_nr)) {
            throw new \InvalidArgumentException('non-nullable street_nr cannot be null');
        }
        $this->container['street_nr'] = $street_nr;

        return $this;
    }

    /**
     * Gets nr_in_building
     *
     * @return string|null
     */
    public function getNrInBuilding()
    {
        return $this->container['nr_in_building'];
    }

    /**
     * Sets nr_in_building
     *
     * @param string|null $nr_in_building Number within the building of the legal company address || Can be NULL
     *
     * @return self
     */
    public function setNrInBuilding($nr_in_building)
    {
        if (is_null($nr_in_building)) {
            throw new \InvalidArgumentException('non-nullable nr_in_building cannot be null');
        }
        $this->container['nr_in_building'] = $nr_in_building;

        return $this;
    }

    /**
     * Gets mail_route
     *
     * @return string|null
     */
    public function getMailRoute()
    {
        return $this->container['mail_route'];
    }

    /**
     * Sets mail_route
     *
     * @param string|null $mail_route Mail routing of the legal company address || Can be NULL
     *
     * @return self
     */
    public function setMailRoute($mail_route)
    {
        if (is_null($mail_route)) {
            throw new \InvalidArgumentException('non-nullable mail_route cannot be null');
        }
        $this->container['mail_route'] = $mail_route;

        return $this;
    }

    /**
     * Gets additional_info1
     *
     * @return string|null
     */
    public function getAdditionalInfo1()
    {
        return $this->container['additional_info1'];
    }

    /**
     * Sets additional_info1
     *
     * @param string|null $additional_info1 More information on the address of the legal company address || Can be NULL
     *
     * @return self
     */
    public function setAdditionalInfo1($additional_info1)
    {
        if (is_null($additional_info1)) {
            throw new \InvalidArgumentException('non-nullable additional_info1 cannot be null');
        }
        $this->container['additional_info1'] = $additional_info1;

        return $this;
    }

    /**
     * Gets additional_info2
     *
     * @return string|null
     */
    public function getAdditionalInfo2()
    {
        return $this->container['additional_info2'];
    }

    /**
     * Sets additional_info2
     *
     * @param string|null $additional_info2 More information on the address of the legal company address || Can be NULL
     *
     * @return self
     */
    public function setAdditionalInfo2($additional_info2)
    {
        if (is_null($additional_info2)) {
            throw new \InvalidArgumentException('non-nullable additional_info2 cannot be null');
        }
        $this->container['additional_info2'] = $additional_info2;

        return $this;
    }

    /**
     * Gets additional_info3
     *
     * @return string|null
     */
    public function getAdditionalInfo3()
    {
        return $this->container['additional_info3'];
    }

    /**
     * Sets additional_info3
     *
     * @param string|null $additional_info3 More information on the address of the legal company address || Can be NULL
     *
     * @return self
     */
    public function setAdditionalInfo3($additional_info3)
    {
        if (is_null($additional_info3)) {
            throw new \InvalidArgumentException('non-nullable additional_info3 cannot be null');
        }
        $this->container['additional_info3'] = $additional_info3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


