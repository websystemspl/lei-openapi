<?php
/**
 * PaymentDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentPrice' => 'string',
        'typPrepaid' => 'string',
        'paymentType' => 'string',
        'paymentCode' => 'string',
        'paymentCurrency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paymentPrice' => null,
        'typPrepaid' => null,
        'paymentType' => null,
        'paymentCode' => null,
        'paymentCurrency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'paymentPrice' => false,
		'typPrepaid' => false,
		'paymentType' => false,
		'paymentCode' => false,
		'paymentCurrency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentPrice' => 'paymentPrice',
        'typPrepaid' => 'typPrepaid',
        'paymentType' => 'paymentType',
        'paymentCode' => 'paymentCode',
        'paymentCurrency' => 'paymentCurrency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentPrice' => 'setPaymentPrice',
        'typPrepaid' => 'setTypPrepaid',
        'paymentType' => 'setPaymentType',
        'paymentCode' => 'setPaymentCode',
        'paymentCurrency' => 'setPaymentCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentPrice' => 'getPaymentPrice',
        'typPrepaid' => 'getTypPrepaid',
        'paymentType' => 'getPaymentType',
        'paymentCode' => 'getPaymentCode',
        'paymentCurrency' => 'getPaymentCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_TYPE_INVOICE = 'PaymentType.INVOICE';
    public const PAYMENT_TYPE_PREPAID = 'PaymentType.PREPAID';
    public const PAYMENT_CURRENCY_INR = 'PaymentCurrency.INR';
    public const PAYMENT_CURRENCY_EUR = 'PaymentCurrency.EUR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_INVOICE,
            self::PAYMENT_TYPE_PREPAID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentCurrencyAllowableValues()
    {
        return [
            self::PAYMENT_CURRENCY_INR,
            self::PAYMENT_CURRENCY_EUR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('paymentPrice', $data ?? [], null);
        $this->setIfExists('typPrepaid', $data ?? [], null);
        $this->setIfExists('paymentType', $data ?? [], null);
        $this->setIfExists('paymentCode', $data ?? [], null);
        $this->setIfExists('paymentCurrency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['paymentType']) && !in_array($this->container['paymentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentType', must be one of '%s'",
                $this->container['paymentType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentCurrencyAllowableValues();
        if (!is_null($this->container['paymentCurrency']) && !in_array($this->container['paymentCurrency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentCurrency', must be one of '%s'",
                $this->container['paymentCurrency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentPrice
     *
     * @return string|null
     */
    public function getPaymentPrice()
    {
        return $this->container['paymentPrice'];
    }

    /**
     * Sets paymentPrice
     *
     * @param string|null $paymentPrice The price paid for the LEI || Price without a comma or point in full number 65.85 -> 6585
     *
     * @return self
     */
    public function setPaymentPrice($paymentPrice)
    {
        if (is_null($paymentPrice)) {
            throw new \InvalidArgumentException('non-nullable paymentPrice cannot be null');
        }
        $this->container['paymentPrice'] = $paymentPrice;

        return $this;
    }

    /**
     * Gets typPrepaid
     *
     * @return string|null
     */
    public function getTypPrepaid()
    {
        return $this->container['typPrepaid'];
    }

    /**
     * Sets typPrepaid
     *
     * @param string|null $typPrepaid If payment_type = PREPAID | Which payment provider was used
     *
     * @return self
     */
    public function setTypPrepaid($typPrepaid)
    {
        if (is_null($typPrepaid)) {
            throw new \InvalidArgumentException('non-nullable typPrepaid cannot be null');
        }
        $this->container['typPrepaid'] = $typPrepaid;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string|null $paymentType What type of payment was used? There is INVOICE and PREPAID
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        if (is_null($paymentType)) {
            throw new \InvalidArgumentException('non-nullable paymentType cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($paymentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentType', must be one of '%s'",
                    $paymentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets paymentCode
     *
     * @return string|null
     */
    public function getPaymentCode()
    {
        return $this->container['paymentCode'];
    }

    /**
     * Sets paymentCode
     *
     * @param string|null $paymentCode The payment code returned by the payment provider
     *
     * @return self
     */
    public function setPaymentCode($paymentCode)
    {
        if (is_null($paymentCode)) {
            throw new \InvalidArgumentException('non-nullable paymentCode cannot be null');
        }
        $this->container['paymentCode'] = $paymentCode;

        return $this;
    }

    /**
     * Gets paymentCurrency
     *
     * @return string|null
     */
    public function getPaymentCurrency()
    {
        return $this->container['paymentCurrency'];
    }

    /**
     * Sets paymentCurrency
     *
     * @param string|null $paymentCurrency Currency in which the LEI was paid
     *
     * @return self
     */
    public function setPaymentCurrency($paymentCurrency)
    {
        if (is_null($paymentCurrency)) {
            throw new \InvalidArgumentException('non-nullable paymentCurrency cannot be null');
        }
        $allowedValues = $this->getPaymentCurrencyAllowableValues();
        if (!in_array($paymentCurrency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentCurrency', must be one of '%s'",
                    $paymentCurrency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentCurrency'] = $paymentCurrency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


