<?php
/**
 * InvoiceContact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceContact Class Doc Comment
 *
 * @category Class
 * @description Can be used to send the invoice to a different contact person
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceContact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoiceToContactAddress' => 'bool',
        'salutation' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'phoneNr' => 'string',
        'areaCode' => 'string',
        'sign' => 'string',
        'mail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoiceToContactAddress' => null,
        'salutation' => null,
        'firstname' => null,
        'lastname' => null,
        'phoneNr' => null,
        'areaCode' => null,
        'sign' => null,
        'mail' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoiceToContactAddress' => false,
		'salutation' => false,
		'firstname' => false,
		'lastname' => false,
		'phoneNr' => false,
		'areaCode' => false,
		'sign' => false,
		'mail' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceToContactAddress' => 'invoiceToContactAddress',
        'salutation' => 'salutation',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'phoneNr' => 'phone_nr',
        'areaCode' => 'area_code',
        'sign' => 'sign',
        'mail' => 'mail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceToContactAddress' => 'setInvoiceToContactAddress',
        'salutation' => 'setSalutation',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'phoneNr' => 'setPhoneNr',
        'areaCode' => 'setAreaCode',
        'sign' => 'setSign',
        'mail' => 'setMail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceToContactAddress' => 'getInvoiceToContactAddress',
        'salutation' => 'getSalutation',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'phoneNr' => 'getPhoneNr',
        'areaCode' => 'getAreaCode',
        'sign' => 'getSign',
        'mail' => 'getMail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SALUTATION_M = 'Salutation.M';
    public const SALUTATION_F = 'Salutation.F';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalutationAllowableValues()
    {
        return [
            self::SALUTATION_M,
            self::SALUTATION_F,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoiceToContactAddress', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('phoneNr', $data ?? [], null);
        $this->setIfExists('areaCode', $data ?? [], null);
        $this->setIfExists('sign', $data ?? [], null);
        $this->setIfExists('mail', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invoiceToContactAddress'] === null) {
            $invalidProperties[] = "'invoiceToContactAddress' can't be null";
        }
        $allowedValues = $this->getSalutationAllowableValues();
        if (!is_null($this->container['salutation']) && !in_array($this->container['salutation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'salutation', must be one of '%s'",
                $this->container['salutation'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['phoneNr']) && !preg_match("/^[0-9]+$/", $this->container['phoneNr'])) {
            $invalidProperties[] = "invalid value for 'phoneNr', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['areaCode']) && !preg_match("/^[A-Z]{2}$/", $this->container['areaCode'])) {
            $invalidProperties[] = "invalid value for 'areaCode', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if (!is_null($this->container['mail']) && !preg_match("/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)?$/", $this->container['mail'])) {
            $invalidProperties[] = "invalid value for 'mail', must be conform to the pattern /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceToContactAddress
     *
     * @return bool
     */
    public function getInvoiceToContactAddress()
    {
        return $this->container['invoiceToContactAddress'];
    }

    /**
     * Sets invoiceToContactAddress
     *
     * @param bool $invoiceToContactAddress If True the other attributes of InvoiceContact arent necessary and can be NULL
     *
     * @return self
     */
    public function setInvoiceToContactAddress($invoiceToContactAddress)
    {
        if (is_null($invoiceToContactAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceToContactAddress cannot be null');
        }
        $this->container['invoiceToContactAddress'] = $invoiceToContactAddress;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation Salutation of the contact person of the company to which the invoice is to be sent  || Can be NULL
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $allowedValues = $this->getSalutationAllowableValues();
        if (!in_array($salutation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'salutation', must be one of '%s'",
                    $salutation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname First name of the contact person of the company to which the invoice is to be sent || Can be NULL
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname Surname of the contact person of the company to which the invoice is to be sent || Can be NULL
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            throw new \InvalidArgumentException('non-nullable lastname cannot be null');
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets phoneNr
     *
     * @return string|null
     */
    public function getPhoneNr()
    {
        return $this->container['phoneNr'];
    }

    /**
     * Sets phoneNr
     *
     * @param string|null $phoneNr Telephone number of the contact person of the company to which the invoice is to be sent || Can be NULL
     *
     * @return self
     */
    public function setPhoneNr($phoneNr)
    {
        if (is_null($phoneNr)) {
            throw new \InvalidArgumentException('non-nullable phoneNr cannot be null');
        }

        if ((!preg_match("/^[0-9]+$/", $phoneNr))) {
            throw new \InvalidArgumentException("invalid value for \$phoneNr when calling InvoiceContact., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['phoneNr'] = $phoneNr;

        return $this;
    }

    /**
     * Gets areaCode
     *
     * @return string|null
     */
    public function getAreaCode()
    {
        return $this->container['areaCode'];
    }

    /**
     * Sets areaCode
     *
     * @param string|null $areaCode Telephone area code based on the country's two-digit ISO code || Can be NULL
     *
     * @return self
     */
    public function setAreaCode($areaCode)
    {
        if (is_null($areaCode)) {
            throw new \InvalidArgumentException('non-nullable areaCode cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", $areaCode))) {
            throw new \InvalidArgumentException("invalid value for \$areaCode when calling InvoiceContact., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['areaCode'] = $areaCode;

        return $this;
    }

    /**
     * Gets sign
     *
     * @return string|null
     */
    public function getSign()
    {
        return $this->container['sign'];
    }

    /**
     * Sets sign
     *
     * @param string|null $sign A reference / note from the company to which the invoice is to be issued || Can be NULL
     *
     * @return self
     */
    public function setSign($sign)
    {
        if (is_null($sign)) {
            throw new \InvalidArgumentException('non-nullable sign cannot be null');
        }
        $this->container['sign'] = $sign;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return string|null
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param string|null $mail Mail address of the contact person to which the invoice is to be sent
     *
     * @return self
     */
    public function setMail($mail)
    {
        if (is_null($mail)) {
            throw new \InvalidArgumentException('non-nullable mail cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)?$/", $mail))) {
            throw new \InvalidArgumentException("invalid value for \$mail when calling InvoiceContact., must conform to the pattern /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)?$/.");
        }

        $this->container['mail'] = $mail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


