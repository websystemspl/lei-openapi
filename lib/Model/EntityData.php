<?php
/**
 * EntityData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EntityData Class Doc Comment
 *
 * @category Class
 * @description All company data to create the LEI
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EntityData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EntityData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'taxid' => 'string',
        'register_nr' => 'string',
        'registration_authority_key' => 'string',
        'registration_authority_text' => 'string',
        'legal_form_text' => 'string',
        'legal_form_key' => 'string',
        'destination_country' => 'string',
        'creation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'taxid' => null,
        'register_nr' => null,
        'registration_authority_key' => null,
        'registration_authority_text' => null,
        'legal_form_text' => null,
        'legal_form_key' => null,
        'destination_country' => null,
        'creation_date' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'taxid' => false,
		'register_nr' => false,
		'registration_authority_key' => false,
		'registration_authority_text' => false,
		'legal_form_text' => false,
		'legal_form_key' => false,
		'destination_country' => false,
		'creation_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'taxid' => 'taxid',
        'register_nr' => 'registerNr',
        'registration_authority_key' => 'registrationAuthorityKey',
        'registration_authority_text' => 'registrationAuthorityText',
        'legal_form_text' => 'legalFormText',
        'legal_form_key' => 'legalFormKey',
        'destination_country' => 'destinationCountry',
        'creation_date' => 'creationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'taxid' => 'setTaxid',
        'register_nr' => 'setRegisterNr',
        'registration_authority_key' => 'setRegistrationAuthorityKey',
        'registration_authority_text' => 'setRegistrationAuthorityText',
        'legal_form_text' => 'setLegalFormText',
        'legal_form_key' => 'setLegalFormKey',
        'destination_country' => 'setDestinationCountry',
        'creation_date' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'taxid' => 'getTaxid',
        'register_nr' => 'getRegisterNr',
        'registration_authority_key' => 'getRegistrationAuthorityKey',
        'registration_authority_text' => 'getRegistrationAuthorityText',
        'legal_form_text' => 'getLegalFormText',
        'legal_form_key' => 'getLegalFormKey',
        'destination_country' => 'getDestinationCountry',
        'creation_date' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('taxid', $data ?? [], null);
        $this->setIfExists('register_nr', $data ?? [], null);
        $this->setIfExists('registration_authority_key', $data ?? [], null);
        $this->setIfExists('registration_authority_text', $data ?? [], null);
        $this->setIfExists('legal_form_text', $data ?? [], null);
        $this->setIfExists('legal_form_key', $data ?? [], null);
        $this->setIfExists('destination_country', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Company name of the company for which the LEI is created
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets taxid
     *
     * @return string|null
     */
    public function getTaxid()
    {
        return $this->container['taxid'];
    }

    /**
     * Sets taxid
     *
     * @param string|null $taxid VAT ID of the company for which the LEI is created
     *
     * @return self
     */
    public function setTaxid($taxid)
    {
        if (is_null($taxid)) {
            throw new \InvalidArgumentException('non-nullable taxid cannot be null');
        }
        $this->container['taxid'] = $taxid;

        return $this;
    }

    /**
     * Gets register_nr
     *
     * @return string|null
     */
    public function getRegisterNr()
    {
        return $this->container['register_nr'];
    }

    /**
     * Sets register_nr
     *
     * @param string|null $register_nr Registration number of the company for which the LEI is created
     *
     * @return self
     */
    public function setRegisterNr($register_nr)
    {
        if (is_null($register_nr)) {
            throw new \InvalidArgumentException('non-nullable register_nr cannot be null');
        }
        $this->container['register_nr'] = $register_nr;

        return $this;
    }

    /**
     * Gets registration_authority_key
     *
     * @return string|null
     */
    public function getRegistrationAuthorityKey()
    {
        return $this->container['registration_authority_key'];
    }

    /**
     * Sets registration_authority_key
     *
     * @param string|null $registration_authority_key RA000709', -> Registration authority of the company for which the LEI is created | Use GLEIF RA Code from LIST -> https://api.gleif.org/api/v1/registration-authorities || The RA code RA777777 is used for General Government Entities and International Organizations only in case there is no information available in any regular registration authority and Public Legal Documents are used for validation instead. RA code RA888888 is used as an interim code. This indicates that a Registration/Validation Authority is not available on the RA list. The RA code RA999999 refers to situations when no Registration Authority can be defined for a Legal Entity.
     *
     * @return self
     */
    public function setRegistrationAuthorityKey($registration_authority_key)
    {
        if (is_null($registration_authority_key)) {
            throw new \InvalidArgumentException('non-nullable registration_authority_key cannot be null');
        }
        $this->container['registration_authority_key'] = $registration_authority_key;

        return $this;
    }

    /**
     * Gets registration_authority_text
     *
     * @return string|null
     */
    public function getRegistrationAuthorityText()
    {
        return $this->container['registration_authority_text'];
    }

    /**
     * Sets registration_authority_text
     *
     * @param string|null $registration_authority_text Free text exception if GLEIF code for entity_registration_authority_key is RA777777, RA888888 or RA999999.
     *
     * @return self
     */
    public function setRegistrationAuthorityText($registration_authority_text)
    {
        if (is_null($registration_authority_text)) {
            throw new \InvalidArgumentException('non-nullable registration_authority_text cannot be null');
        }
        $this->container['registration_authority_text'] = $registration_authority_text;

        return $this;
    }

    /**
     * Gets legal_form_text
     *
     * @return string|null
     */
    public function getLegalFormText()
    {
        return $this->container['legal_form_text'];
    }

    /**
     * Sets legal_form_text
     *
     * @param string|null $legal_form_text SHALL include the correct name of the entity's legal form where no ELF code exists (if GLEIF code for entity_legal_form_key is 8888 or 9999).
     *
     * @return self
     */
    public function setLegalFormText($legal_form_text)
    {
        if (is_null($legal_form_text)) {
            throw new \InvalidArgumentException('non-nullable legal_form_text cannot be null');
        }
        $this->container['legal_form_text'] = $legal_form_text;

        return $this;
    }

    /**
     * Gets legal_form_key
     *
     * @return string|null
     */
    public function getLegalFormKey()
    {
        return $this->container['legal_form_key'];
    }

    /**
     * Sets legal_form_key
     *
     * @param string|null $legal_form_key Legal form of the company for which the LEI is created | Use GLEIF ELF CODE from LIST -> https://api.gleif.org/api/v1/entity-legal-forms || ELF code 8888 is to be used when a new ELF code (for a legal form not yet on the list) is requested by an LEI issuer from GLEIF for a jurisdiction which is on the ELF code list. ELF code 9999 is to be used for LEIs from a jurisdiction which is not on the ELF code list yet
     *
     * @return self
     */
    public function setLegalFormKey($legal_form_key)
    {
        if (is_null($legal_form_key)) {
            throw new \InvalidArgumentException('non-nullable legal_form_key cannot be null');
        }
        $this->container['legal_form_key'] = $legal_form_key;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string|null
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string|null $destination_country Country of the company for which the LEI is created
     *
     * @return self
     */
    public function setDestinationCountry($destination_country)
    {
        if (is_null($destination_country)) {
            throw new \InvalidArgumentException('non-nullable destination_country cannot be null');
        }
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date Foundation date of the company for which the LEI is created | DateTimeFormat.ISO.DATE
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


